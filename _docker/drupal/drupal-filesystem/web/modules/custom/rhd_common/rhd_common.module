<?php
/**
 * @file
 * Add various functionalities here.
 */

use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_alter().
 */
function rhd_common_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // If Article add form, add custom form validator.
  if ($form_id == 'node_article_edit_form' || $form_id == 'node_article_form') {
    $pathauto = $form['path']['widget'][0]['pathauto'];
    if ($form_id != 'node_article_edit_form') {
      $form['path']['widget'][0]['pathauto']['#default_value'] = 0;
    }
    $form['path']['widget'][0]['alias']['#states']['disabled']['input[name="path[0][pathauto]"]']['checked'] = 0;
    // Override default validator with custom validator.
    if (!empty($form['path'])) {
      // Check if widget array is not empty.
      if (!empty($form['path']['widget'])) {
        $form['path']['widget'][0]['#element_validate'][0] = 'rhd_common_custom_form_validator';
      }
    }
  }
}


/**
 * Custom form validator.
 */
function rhd_common_custom_form_validator(array &$element, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Trim the submitted value of whitespace and slashes.
  $alias = rtrim(trim($element['alias']['#value']), " \\/");
  $element['alias']['#attached']['library'][] = 'rhd_common/sample_library';
  if (empty($element['pathauto']['#checked']) && empty($alias)) {
    $form_state->setError($element, t('please add a url alias.'));
  }
  
  if (!empty($alias)) {
    // Check if alias already has a slash.
    if (substr($alias, 0, 1) !== '/') {
      $alias = '/' . $alias;
    }
    $form_state->setValueForElement($element['alias'], $alias);
    //Validate that the submitted alias does not exist yet.
    $is_exists = \Drupal::service('path.alias_storage')->aliasExists($alias, $element['langcode']['#value'], $element['source']['#value']);
    if ($is_exists) {
      $form_state->setError($element, t('The alias is already in use.'));
    }
  }

  if ($alias && $alias[0] !== '/') {
    $form_state->setError($element, t('The alias needs to start with a slash.'));
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function rhd_common_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if (isset($form['publish_date'])) {
    $form['scheduling_options'] = array(
      '#type' => 'details',
      '#title' => t('Scheduling Options'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'advanced',
      '#weight' => -2, //Tab location
    );
    $form['scheduling_options']['und'][0] = $form['publish_date'];
     // Unset publish date field.
    unset($form['publish_date']);
  }
}

/**
 * Implements hook_user_login().
 */
function rhd_common_user_login($account) {
  $roles = array('content_author', 'content_editor', 'content_publisher');
  $user_roles = $account->getRoles();
  $module_exists = \Drupal::moduleHandler()->moduleExists('workbench');
  if (array_intersect($roles, $user_roles) && $module_exists) {
     $url = Url::fromRoute('workbench.content')->toString();
     $response = new RedirectResponse($url);
     $response->send(); 
  }
}
