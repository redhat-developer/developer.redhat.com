<?php

/**
 * @file
 * Functions to support theming in the RHD theme.
 */
use Drupal\field_collection\Entity\FieldCollectionItem;
use Drupal\Core\Url;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\FieldItemBase;
use Drupal\Core\Link;


function rhd_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    $node = \Drupal::request()->attributes->get('node');
    if (!is_null($node) && method_exists($node, 'getType')) {
        $new_suggestion = 'page__' . $node->getType();

        if (!in_array($new_suggestion, $suggestions)) {
            $suggestions[] = $new_suggestion;
        }
    }

    return $suggestions;
}

function rhd_theme_suggestions_node_alter(array &$suggestions, array $variables) {
    $found_suggestion_matches = preg_grep("/node__\D+__/", $suggestions);

    // If we have found_suggestion_matches, just return those as they'll be more specific anyway
    // This does feel kind of hacky, but not sure of a better solution
    if (!is_null($found_suggestion_matches)) {
        return $suggestions;
    }

    $node = \Drupal::request()->attributes->get('node');
    if (!is_null($node) && method_exists($node, 'getType')) {
        $new_suggestion = 'node__' . $node->getType();

        if (!in_array($new_suggestion, $suggestions)) {
            $suggestions[] = $new_suggestion;
        }
    }

    return $suggestions;
}

function rhd_theme_suggestions_block_alter(array &$suggestions, array $variables) {
    $node = \Drupal::request()->attributes->get('node');
    $suggestion = 'block';
    $parts = explode(':', $variables['elements']['#plugin_id']);

    if (!is_null($node) && method_exists($node, 'getType')) {
          $suggestions[] = $suggestion .= '__' . $node->getType();
    }

    while ($part = array_shift($parts)) {
      $suggestions[] = $suggestion .= '__' . strtr($part, '-', '_');
    }

    return $suggestions;
}

function rhd_theme_suggestions_toc_responsive_alter(array &$suggestions, array $variables) {
    $node = \Drupal::request()->attributes->get('node');
    $suggestion = 'toc_responsive';
    $parts = explode(':', $variables['elements']['#plugin_id']);

    if (!is_null($node) && method_exists($node, 'getType')) {
        $suggestions[] = $suggestion .= '__' . $node->getType();
    }

    while ($part = array_shift($parts)) {
        $suggestions[] = $suggestion .= '__' . strtr($part, '-', '_');
    }

    return $suggestions;
}

function rhd_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
    $suggestion = 'taxonomy_term';

    $term = $variables['elements']['#taxonomy_term'];
    $node = \Drupal::request()->attributes->get('node');

    if (!is_null($node) && method_exists($node, 'getType')) {
        $suggestions[] = $suggestion .= '__' . $node->getType();
    }

    $suggestions[] = $suggestion . '__' . $term->bundle();
    $suggestions[] = $suggestion . '__' . $term->id();

    return $suggestions;
}

function rhd_preprocess_html(array &$variables) {
    $environment = \Drupal::config('redhat_developers')->get('environment');
    $dtm_code = \Drupal::config('redhat_developers')->get('dtm_code');

    $variables['rhd_environment'] = $environment;
    $variables['rhd_dtm_code'] = $dtm_code;
}

function rhd_js_settings_alter(array &$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
    $env_settings = \Drupal::config('redhat_developers');

    $settings['rhd'] = array();
    $rhd_settings = &$settings['rhd'];

    $rhd_settings['downloadManager'] = array();
    $rhd_settings['downloadManager']['baseUrl'] = $env_settings->get('downloadManager')['baseUrl'];
    $rhd_settings['dcp']['baseProtocolRelativeUrl'] = $env_settings->get('searchisko')['protocol'] . "://" . $env_settings->get('searchisko')['host'] . ":"
        . $env_settings->get('searchisko')['port'];

    $rhd_settings['keycloak'] = array();
    $rhd_settings['keycloak']['accountUrl'] = $env_settings->get('keycloak')['accountUrl'];
    $rhd_settings['keycloak']['authUrl'] = $env_settings->get('keycloak')['authUrl'];

    $theme_path = drupal_get_path('theme', 'rhd');

    $rhd_settings['templates'] = array();
    $template = file_get_contents($theme_path . '/templates/client-side/book.html.twig');
    $rhd_settings['templates']['book'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/mini_buzz.html.twig');
    $rhd_settings['templates']['miniBuzz'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/product_buzz.html.twig');
    $rhd_settings['templates']['productBuzz'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/buzz.html.twig');
    $rhd_settings['templates']['buzz'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/terms_conditions.html.twig');
    $rhd_settings['templates']['termsConditions'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/product_connector.html.twig');
    $rhd_settings['templates']['connector'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/product_stackoverflow_template.html.twig');
    $rhd_settings['templates']['productStackoverflowTemplate'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/search_page_template.html.twig');
    $rhd_settings['templates']['searchPageTemplate'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/stackoverflow_template.html.twig');
    $rhd_settings['templates']['stackoverflowTemplate'] = $template;
}

/**
 * Implements template_preprocess_node().
 */
function rhd_preprocess_node(&$variables) {
  $variables['node'] = $variables['elements']['#node'];
  $node = $variables['node'];
  $nid = $node->id();
  if ($node->getType() == 'product') {
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    $product_code = $node->field_product_machine_name->value;
    if ($path_args[1] == 'node') {
      $pages = reset($node->field_product_pages);
      $overview_page_id = $pages[0]->target_id;
      $overview_page_paragraph = entity_load('paragraph', $overview_page_id);
      $overview_page_content = $overview_page_paragraph->field_overview_main_content->value;
      $active_page = $overview_page_paragraph->field_overview_url->value;
    }
    $variables['main_content'] = $overview_page_content;
    foreach ($node->field_product_pages as $product_page) {
      $product_pages_id = $product_page->target_id;
      $load_paragraph = entity_load('paragraph', $product_pages_id);
      $overview_url = $load_paragraph->field_overview_url->value;
      $url_string = str_replace(' ', '-', strtolower($overview_url));
      $url = Url::fromRoute('rhd_common.main_page_controller', array(
          'product_code' => $product_code,
          'sub_page' => $url_string,
        ), array('absolute' => TRUE))->toString();
      if ($active_page == $overview_url) {
        $product_pages_url[] = array(
          'title' => $overview_url,
          'url' => $url,
          'active' => 1,
        );
      }
      if ($active_page != $overview_url) {
        $product_pages_url[] = array('title' => $overview_url, 'url' => $url);
      }
    }
    $variables['product_pages'] = $product_pages_url;
  }
}
