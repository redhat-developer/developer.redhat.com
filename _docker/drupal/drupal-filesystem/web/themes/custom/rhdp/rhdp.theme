<?php

/**
 * @file
 * Functions to support theming in the RHD theme.
 */
use Drupal\field_collection\Entity\FieldCollectionItem;
use Drupal\Core\Url;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\FieldItemBase;
use Drupal\Core\Link;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;


function rhdp_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    $node = \Drupal::request()->attributes->get('node');
    if (!is_null($node) && method_exists($node, 'getType')) {
        $new_suggestion = 'page__' . $node->getType();

        if (!in_array($new_suggestion, $suggestions)) {
            $suggestions[] = $new_suggestion;
        }
    }

    return $suggestions;
}

function rhdp_theme_suggestions_node_alter(array &$suggestions, array $variables) {
    $found_suggestion_matches = preg_grep("/node__\D+__/", $suggestions);

    // If we have found_suggestion_matches, just return those as they'll be more specific anyway
    // This does feel kind of hacky, but not sure of a better solution
    if (!is_null($found_suggestion_matches)) {
        return $suggestions;
    }

    $node = \Drupal::request()->attributes->get('node');
    if (!is_null($node) && method_exists($node, 'getType')) {
        $new_suggestion = 'node__' . $node->getType();

        if (!in_array($new_suggestion, $suggestions)) {
            $suggestions[] = $new_suggestion;
        }
    }

    return $suggestions;
}

function rhdp_theme_suggestions_block_alter(array &$suggestions, array $variables) {
    $node = \Drupal::request()->attributes->get('node');
    $suggestion = 'block';
    $parts = explode(':', $variables['elements']['#plugin_id']);

    if (!is_null($node) && method_exists($node, 'getType')) {
          $suggestions[] = $suggestion .= '__' . $node->getType();
    }

    while ($part = array_shift($parts)) {
      $suggestions[] = $suggestion .= '__' . strtr($part, '-', '_');
    }

    return $suggestions;
}

function rhdp_theme_suggestions_toc_responsive_alter(array &$suggestions, array $variables) {
    $node = \Drupal::request()->attributes->get('node');
    $suggestion = 'toc_responsive';
    $parts = explode(':', $variables['elements']['#plugin_id']);

    if (!is_null($node) && method_exists($node, 'getType')) {
        $suggestions[] = $suggestion .= '__' . $node->getType();
    }

    while ($part = array_shift($parts)) {
        $suggestions[] = $suggestion .= '__' . strtr($part, '-', '_');
    }

    return $suggestions;
}

function rhdp_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
    $suggestion = 'taxonomy_term';

    $term = $variables['elements']['#taxonomy_term'];
    $node = \Drupal::request()->attributes->get('node');

    if (!is_null($node) && method_exists($node, 'getType')) {
        $suggestions[] = $suggestion .= '__' . $node->getType();
    }

    $suggestions[] = $suggestion . '__' . $term->bundle();
    $suggestions[] = $suggestion . '__' . $term->id();

    return $suggestions;
}

function rhdp_preprocess_html(array &$variables) {
    $current_path = \Drupal::service('path.current')->getPath();
    $environment = \Drupal::config('redhat_developers')->get('environment');
    $dtm_code = \Drupal::config('redhat_developers')->get('dtm_code');
    $sentry_track = \Drupal::config('redhat_developers')->get('sentry_track');
    $sentry_script = \Drupal::config('redhat_developers')->get('sentry_script');
    $sentry_code = \Drupal::config('redhat_developers')->get('sentry_code');
    $rhd_base_url = \Drupal::config('redhat_developers')->get('rhd_base_url');
    $rhd_final_base_url = \Drupal::config('redhat_developers')
        ->get('rhd_final_base_url');

    $variables['rhd_environment'] = $environment;
    $variables['rhd_dtm_code'] = $dtm_code;
    $variables['rhd_dtm_script'] = redhat_www_ddo_default(\Drupal::request()->attributes->get('node'));
    $variables['rhd_sentry_track'] = $sentry_track;
    $variables['rhd_sentry_script'] = $sentry_script;
    $variables['rhd_sentry_code'] = $sentry_code;
    $variables['rhd_base_url'] = $rhd_base_url;
    $variables['rhd_final_base_url'] = $rhd_final_base_url;
    $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

    if ($environment != 'prod') {
        $referrer = [
        '#tag' => 'meta',
        '#attributes' => [
            'name' => 'referrer',      // Set name for element
            'value' => 'unsafe-url'    // Set value for title
        ],
        ];
        $variables['page']['#attached']['html_head'][] = [$referrer, 'referrer'];
    }
}

function rhd_js_settings_alter(array &$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
    $env_settings = \Drupal::config('redhat_developers');

    $settings['rhd'] = array();
    $rhd_settings = &$settings['rhd'];

    $rhd_settings['urls'] = array();
    $rhd_settings['urls']['base_url'] = \Drupal::config('redhat_developers')->get('rhd_base_url');
    $rhd_settings['urls']['final_base_url'] = \Drupal::config('redhat_developers')->get('rhd_final_base_url');

    $rhd_settings['downloadManager'] = array();
    $rhd_settings['downloadManager']['baseUrl'] = $env_settings->get('downloadManager')['baseUrl'];
    $rhd_settings['dcp']['baseProtocolRelativeUrl'] = $env_settings->get('searchisko')['protocol'] . "://" . $env_settings->get('searchisko')['host'] . ":"
        . $env_settings->get('searchisko')['port'];

    $rhd_settings['keycloak'] = array();
    $rhd_settings['keycloak']['accountUrl'] = $env_settings->get('keycloak')['accountUrl'];
    $rhd_settings['keycloak']['authUrl'] = $env_settings->get('keycloak')['authUrl'];

    $theme_path = drupal_get_path('theme', 'rhd');

    $rhd_settings['templates'] = array();
    $template = file_get_contents($theme_path . '/templates/client-side/book.html.twig');
    $rhd_settings['templates']['book'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/mini_buzz.html.twig');
    $rhd_settings['templates']['miniBuzz'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/product_buzz.html.twig');
    $rhd_settings['templates']['productBuzz'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/buzz.html.twig');
    $rhd_settings['templates']['buzz'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/terms_conditions.html.twig');
    $rhd_settings['templates']['termsConditions'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/product_connector.html.twig');
    $rhd_settings['templates']['connector'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/product_stackoverflow_template.html.twig');
    $rhd_settings['templates']['productStackoverflowTemplate'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/search_page_template.html.twig');
    $rhd_settings['templates']['searchPageTemplate'] = $template;

    $template = file_get_contents($theme_path . '/templates/client-side/stackoverflow_template.html.twig');
    $rhd_settings['templates']['stackoverflowTemplate'] = $template;
}

/**
 * Implements template_preprocess_node().
 */
function rhdp_preprocess_node(&$variables) {
  $variables['node'] = $variables['elements']['#node'];
  $node = $variables['node'];
  $nid = $node->id();
  if ($node->getType() == 'product') {
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    $product_code = $node->field_product_machine_name->value;
    if ($path_args[1] == 'node') {
      $pages = reset($node->field_product_pages);
      $overview_page_id = $pages[0]->target_id;
      $overview_page_paragraph = entity_load('paragraph', $overview_page_id);
      $overview_page_content = $overview_page_paragraph->field_overview_main_content->value;
      $active_page = $overview_page_paragraph->field_overview_url->value;
    }
    $variables['main_content'] = $overview_page_content;
    foreach ($node->field_product_pages as $product_page) {
      $product_pages_id = $product_page->target_id;
      $load_paragraph = entity_load('paragraph', $product_pages_id);
      $overview_url = $load_paragraph->field_overview_url->value;
      $url_string = str_replace(' ', '-', strtolower($overview_url));
      $url = Url::fromRoute('rhd_common.main_page_controller', array(
          'product_code' => $product_code,
          'sub_page' => $url_string,
        ), array('absolute' => TRUE))->toString();
      if ($active_page == $overview_url) {
        $product_pages_url[] = array(
          'title' => $overview_url,
          'url' => $url,
          'active' => 1,
        );
      }
      if ($active_page != $overview_url) {
        $product_pages_url[] = array('title' => $overview_url, 'url' => $url);
      }
    }
    $variables['product_pages'] = $product_pages_url;
  }

  if ($node->hasField('field_card_image') && $variables['view_mode'] == 'card') {
    $card_image_field = $node->get('field_card_image')->getValue();
    if (count($card_image_field)) {
      $variables['content']['card_image_url'] = [
        '#markup' => reset($card_image_field)['uri']
      ];
      unset($variables['content']['field_card_image']);
    }
  }
}

function redhat_www_ddo_default($node) {
    $request = \Drupal::request();
    $siteerror = \Drupal::configFactory()->get('system.site')->get('page.404');
    $errorType = "";
    $errorMessage = "";
    $ddo_language = "";
    $ddo_pageID = "";
    $ddo_title = "";
    if(!is_null($node)) {
        if ( $siteerror == '/node/'.$node->nid->value ) {
            $errorType = "404";
            $errorMessage = "404-error";
        }

        $ddo_language = $node->langcode->value;
        $ddo_pageID = $node->nid->value;
        $ddo_title = $node->title->value;
    }


    $ddo = array(
        'page' => array(
            'attributes' => array(
                'queryParameters' => ''
            ),
            'category' => array(
                'contentType' => '',
                'contentSubType' => '',
                'keyPage' => false,
                'keyPageType' => '',
                'pageType' => '',
                'primaryCategory' => '',
                'subCategories' => array(),
            ),
            'pageInfo' => array(
                'breadCrumbs' => array(),
                'cms' => 'RHD CMS 8',
                'destinationURL' => '',
                'errorMessage' => $errorMessage,
                'errorType' => $errorType,
                'language' => $ddo_language,
                'pageID' => $ddo_pageID,
                'contentID' => $ddo_pageID,
                'pageName' => '',
                'referringDomain' => '',
                'referringURL' => '',
                'syndicationIds' => array(),
                'sysEnv' => '',
                'title' => $ddo_title,
            ),
            'listing' => array(
                'browseFilter' => '',
                'query' => '',
                'queryMethod' => '',
                'refinementType' => '',
                'refinementValue' => '',
                'resultCount' => '',
                'searchType' => '',
            ),
        ),
        'user' => array(
            array(
                'profile' => array(
                    array(
                        'profileInfo' => array(
                            'accountID' => '',
                            'daysSinceLastPurchase' => '',
                            'daysSinceRegistration' => '',
                            'eloquaGUID' => 'POPULATE ELOQUA ID',
                            'keyCloakID' => '',
                            'loggedIn' => false,
                            'profileID' => '',
                            'registered' => false,
                            'socialAccountsLinked' => array(),
                            'subscriptionFrequency' => '',
                            'subscriptionLevel' => '',
                            'userAgent' => '',
                        ),
                    ),
                ),
            ),
        ),
        'event' => array(),
    );


    return $ddo;
}

/**
 * Implements template_preprocess_field.
 *
 * Adding our css modifications to the video_embed_field type. Had to modify some things mostly due to
 * our site css so we could get the responsive video to work.
 *
 * Adding another edit for embedded products.
 *
 * @param $variables
 * @param $hook
 */
function rhdp_preprocess_field(&$variables, $hook) {
    if ($variables['field_type'] === 'video_embed_field') {
        $variables['items'][0]['content']['#attached']['library'][] = 'rhdp/video_embed_field.responsive-video';
    }

    // This shouldn't be how we display the related product on coding resources (should it be?)
    if ($variables['field_name'] === 'field_related_product' && isset($variables['items'][0]['content']['#node'])) {
      $node = $variables['items'][0]['content']['#node'];
      $variables['product_name'] = $node->getTitle();
      $variables['product_short_name'] = $node->field_product_short_name->value;

      $product_code = $node->field_product_machine_name->value;
      $overview_url = $node->field_product_pages->referencedEntities()[0]->field_overview_url->value;
      $url_string = str_replace(' ', '-', strtolower($overview_url));
      $url = Url::fromRoute('rhd_common.main_page_controller', array(
        'product_code' => $product_code,
        'sub_page' => $url_string,
      ), array('absolute' => TRUE))->toString();
      $variables['overview_url'] = $url;
    }
}

function rhdp_preprocess_assembly(&$variables) {
    $assembly = $variables['elements']['#assembly'];
    $type = $assembly->bundle();
    $variables['background_image_url'] = FALSE;

    // kint(($assembly->hasField('field_background_image') ? 'has' : 'does not have') . ' background image');
    if ($assembly->hasField('field_background_image')) {
      $image_value = $assembly->get('field_background_image')->getValue();
      if ($image_value) {
        $file_id = $image_value[0]['target_id'];
        $uri = File::load($file_id)->getFileUri();
        $variables['background_image_url'] = ImageStyle::load('billboard')->buildUrl($uri);
        $variables['attributes']->addClass('has-background');
      }
    }

}
