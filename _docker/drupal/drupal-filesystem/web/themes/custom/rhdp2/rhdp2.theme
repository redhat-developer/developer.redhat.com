<?php

/**
 * @file
 * Functions to support theming in the RHDP2 theme.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_node().
 */
function rhdp2_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $type = $node->bundle();

  // Prepares the authors render element for the Article node, Card view mode.
  if ($type === 'article' && $variables['view_mode'] === 'card') {
    $authors = $node->get('field_author_evangelist')->getValue();
    $tids = [];

    foreach ($authors as $author) {
      $tids[] = $author['target_id'];
    }

    $author_nodes = Node::loadMultiple($tids);

    if (count($author_nodes) < 1) {
      $variables['authors'] = NULL;
    }
    if (count($author_nodes) === 1) {
      // We can reset to retrieve the element since we've already verified there is only 1.
      $authors_values = [
        'name' => reset($author_nodes)->getTitle(),
        // We need a Url object for Drupal, not a plain string.
        'url' => Url::fromRoute('entity.node.canonical', ['node' => reset($author_nodes)->id()])
      ];

      // Get a renderable author Link and set the rhd-m-link class.
      $authors_link = Link::fromTextAndUrl($authors_values['name'], $authors_values['url']);
      $authors_link = $authors_link->toRenderable();
      $authors_link['#attributes'] = ['class' => ['rhd-m-link']];

      $variables['authors'] = $authors_link;
    }
    else {
      $authors_values = [];

      foreach ($author_nodes as $author_node) {
        $authors_values[] = $author_node->getTitle();
      }

      $variables['authors'] = implode('&', $authors_values);
    }
  }
}

/**
 * Implements hook_preprocess_assembly().
 */
function rhdp2_preprocess_assembly(&$variables) {
  $assembly = $variables['elements']['#assembly'];
  $type = $assembly->bundle();

  $variables['background_image_url'] = FALSE;
  $image_value = FALSE;
  $svg_value = FALSE;

  if ($assembly->hasField('field_background_image')) {
    $image_value = $assembly->get('field_background_image')->getValue();
  }

  if ($assembly->hasField('field_background_svg')) {
    $svg_value = $assembly->get('field_background_svg')->getValue();
  }

  if ($svg_value) {
    $file_id = $svg_value[0]['target_id'];
    $uri = File::load($file_id)->getFileUri();
    $variables['background_image_url'] = file_create_url($uri);
    $variables['attributes']->addClass('has-background');
  } else if ($image_value) {
    $file_id = $image_value[0]['target_id'];
    $uri = File::load($file_id)->getFileUri();
    $variables['background_image_url'] = ImageStyle::load('billboard')->buildUrl($uri);
    $variables['attributes']->addClass('has-background');
  }


  if ($assembly->hasField('field_audience_selection')) {
    $field_audience_selection_values = $assembly->get('field_audience_selection')->getValue();
    $variables['audience_selection'] = '';

    if ($field_audience_selection_values) {
      $audience_selection_values = [];

      foreach ($field_audience_selection_values as $field_audience_selection_value) {
        $audience_selection_values[] = $field_audience_selection_value['value'];
      }

      $audience_selection = implode(',', $audience_selection_values);
      $variables['audience_selection'] = " data-audience={$audience_selection}";
    }
  }

  // Code Snippet assembly type.
  if ($type == 'code_snippet') {
    // Code field.
    if ($assembly->hasField('field_code')) {
      // Verify that the field isset before retrieving the value.
      if (isset($assembly->field_code)) {
        $field_code = $assembly->get('field_code')->getValue()[0]['value'];
        $variables['code'] = $field_code;
      }
      $variables['#attached']['library'][] = 'rhdp2/highlight-js';
    }
    // Programming Language field.
    if ($assembly->hasField('field_programming_language')) {
      // Verify that the field isset before retrieving the value.
      if (isset($assembly->field_programming_language)) {
        $language = $assembly->get('field_programming_language')->getValue()[0]['value'];
        $variables['language'] = isset($language) ? $language : '';
      }
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function rhdp2_preprocess_block(array &$variables) {
  // Verify that the #id has some non-empty value prior to using it.
  if (!empty($variables['elements']['#id'])) {
    $block_id = $variables['elements']['#id'];

    if ($block_id == 'rhdp2_rhdnavigation_mobile') {
      $variables['attributes']['class'][] = 'rhd-nav-mobile';
    }

    if ($block_id == 'rhdp2_rhdnavigation') {
      $variables['attributes']['class'][] = 'rhd-nav-fixed';
    }
  }
}

/**
 * Implements template_preprocess_field().
 */
function rhdp2_preprocess_field(&$variables, $hook) {
  // If this is a non-empty video_embed_field, attach the proper library.
  if ($variables['field_type'] === 'video_embed_field' && !empty($variables['items'][0])) {
    $variables['items'][0]['content']['#attached']['library'][] = 'rhdp2/video_embed_field.responsive-video';
  }

  // If this image field is used as content_image in our Card component, then
  // we will add the rhd-c-card__image-body class.
  // @see ./components/card.twig
  if (_is_field_used_as_content_image_in_card($variables)) {
    foreach ($variables['items'] as $key => $item) {
      $variables['items'][$key]['content']['#item_attributes']['class'][] = 'rhd-c-card__image-body';
    }
  }

  // If this image field is used as hero_image in our Card component, then
  // we will add the rhd-c-card__image class.
  // @see ./components/card.twig
  if (_is_field_used_as_hero_image_in_card($variables)) {
    foreach ($variables['items'] as $key => $item) {
      $variables['items'][$key]['content']['#item_attributes']['class'][] = 'rhd-c-card__image';
    }
  }
}

/**
 * Returns TRUE if field is used to populate the content_image in card.twig.
 *
 * @see ./components/card.twig
 */
function _is_field_used_as_content_image_in_card($variables) {
  if ($variables['entity_type'] === 'node') {
    if (($variables['element']['#bundle'] === 'cheat_sheet' && $variables['element']['#view_mode'] === 'card' && $variables['field_name'] === 'field_cover_image')
      || ($variables['element']['#bundle'] === 'books' && $variables['element']['#view_mode'] === 'card' && $variables['field_name'] === 'field_cover_image')) {

      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Returns TRUE if field is used to populate the hero_image in card.twig.
 *
 * @see ./components/card.twig
 */
function _is_field_used_as_hero_image_in_card($variables) {
  if ($variables['entity_type'] === 'node') {
    if ($variables['element']['#bundle'] === 'product' && $variables['element']['#view_mode'] === 'featured_tile' && $variables['field_name'] === 'field_image') {
      return TRUE;
    }
  }
  else if ($variables['entity_type'] === 'assembly') {
    if ($variables['element']['#bundle'] === 'static_item' && $variables['field_name'] === 'field_image') {
      return TRUE;
    }
  }

  return FALSE;
}
