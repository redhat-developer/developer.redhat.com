#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'tempfile'
require 'gpgme'
require 'yaml'
require 'docker'
require 'socket'
require 'timeout'
require 'erb'
require 'resolv'
require 'open3'
require './lib/misc/Options.rb'
require './lib/misc/FileHelpers.rb'

def building_ci_job?
  return ENV['BUILD_NUMBER']
end

def modify_env(opts)
  unless (building_ci_job?)
    begin
      puts 'decrypting vault'
      crypto = GPGME::Crypto.new
      fname = File.open '../_config/secrets.yaml.gpg'

      secrets = YAML.load(crypto.decrypt(fname).to_s)

      secrets.each do |k, v|
        if k.include? 'drupal'
          ENV[k] = v if opts[:drupal]
        else
          ENV[k] = v
        end
      end
      puts 'Vault decrypted'
    rescue GPGME::Error => e
      abort "Unable to decrypt vault (#{e})"
    end
  end
end

def set_ports

  #The environment names here are for INTERNAL purposes only and do not relate to
  #variables generated by docker or docker-compose
  port_names = ['AWESTRUCT_HOST_PORT', 'DRUPAL_HOST_PORT', 'DRUPALMYSQL_HOST_PORT',
    'MYSQL_HOST_PORT', 'ES_HOST_PORT1', 'ES_HOST_PORT2', 'SEARCHISKO_HOST_PORT']

  # We have to reverse the logic in `is_port_open` because if nothing is listening, we can use it
  available_ports = (32768..61000).lazy.select {|port| !is_port_open?('docker', port)}.take(port_names.size).force
  port_names.each_with_index do |name, index|
    puts "#{name} available at #{available_ports[index]}"
    ENV[name] = available_ports[index].to_s
  end
end

def execute_docker_compose(cmd, args = [])
  Kernel.abort('Error running docker-compose') unless Kernel.system *['docker-compose', cmd.to_s, *args]
end

def execute_docker(cmd, *args)
  Kernel.abort('Error running docker') unless Kernel.system 'docker', cmd.to_s, *args
end

def options_selected? options
  (options[:build] || options[:restart] || options[:awestruct][:gen] || options[:awestruct][:preview] || options[:stage_pr])
end

def is_port_open?(host, port)
  begin
    Timeout::timeout(1) do
      begin
        s = TCPSocket.new(Resolv.new.getaddress(host), port)
        s.close
        true
      rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
        # Doesn't matter, just means it's still down
        false
      end
    end
  rescue Timeout::Error
    # We don't really care about this
    false
  end
end

def block_wait_drupal_started
  docker_drupal = Docker::Container.get('docker_drupal_1')
  until docker_drupal.info['NetworkSettings']['Ports']
    sleep(5)
    docker_drupal = Docker::Container.get('docker_drupal_1')
  end

  # Check to see if Drupal is accepting connections before continuing
  puts 'Waiting to proceed until Drupal is up'
  drupal_port80_info = docker_drupal.info['NetworkSettings']['Ports']['80/tcp'].first
  drupal_ip = drupal_port80_info['HostIp']
  drupal_port = drupal_port80_info['HostPort']

  # Add this to the ENV so we can pass it to the awestruct build
  ENV['DRUPAL_HOST_IP'] = drupal_ip

  up = false
  until up do
    up = is_port_open?(drupal_ip, drupal_port)
  end
end

def block_wait_searchisko_configure_finished
  begin
    configure_service = Docker::Container.get('docker_searchiskoconfigure_1')
  rescue Excon::Errors::SocketError => se
    puts se.backtrace
    puts('There has been a problem with your CA certs, are you developing using boot2docker?')
    puts('If so set your DOCKER_SSL_VERIFY environment variable to false')
    puts('E.g export DOCKER_SSL_VERIFY=false')
    exit #quit the whole thing
  end

  puts 'Waiting to proceed until searchiskoconfigure has completed'

  # searchiskoconfigure takes a while, we need to wait to proceed
  while configure_service.info['State']['Running']
    # TODO We need to figure out if the container has actually died, if it died print an error and abort
    sleep 5
    configure_service = Docker::Container.get('docker_searchiskoconfigure_1')
  end
end

def startup_supporting_services(opts)
  puts 'Starting up services...'
  if opts[:drupal]
    execute_docker_compose :up, %w(-d elasticsearch mysql drupalmysql drupal searchisko searchiskoconfigure)
  else
    execute_docker_compose :up, %w(-d elasticsearch mysql searchisko searchiskoconfigure)
  end

  block_wait_searchisko_configure_finished()

  # Check to see if Drupal is accepting connections before continuing
  block_wait_drupal_started if opts[:drupal]

end

options = Options.parse ARGV

puts Options.parse %w(-h) unless options_selected? options

#the docker url is taken from DOCKER_HOST env variable otherwise
Docker.url = options[:docker] if options[:docker]

modify_env(options)

if options[:build] || options[:restart]
  set_ports()
  # Output the new docker-compose file with the modified ports
  File.delete('docker-compose.yml') if File.exists?('docker-compose.yml')
  File.write('docker-compose.yml', ERB.new(File.read('docker-compose.yml.erb')).result)
end

if options[:build]
  docker_dir = 'awestruct'

  parent_gemfile = File.open '../Gemfile'
  parent_gemlock = File.open '../Gemfile.lock'

  target_gemfile = FileHelpers.open_or_new(docker_dir + '/Gemfile')
  target_gemlock = FileHelpers.open_or_new(docker_dir + '/Gemfile.lock')

  #Only copy if the file has changed. Otherwise docker won't cache optimally
  FileHelpers.copy_if_changed(parent_gemfile, target_gemfile)
  FileHelpers.copy_if_changed(parent_gemlock, target_gemlock)

  puts 'Building base docker image...'
  execute_docker(:build, '--tag=developer.redhat.com/base', './base')
  puts 'Building base Java docker image...'
  execute_docker(:build, '--tag=developer.redhat.com/java', './java')
  puts 'Building base Ruby docker image...'
  execute_docker(:build, '--tag=developer.redhat.com/ruby', './ruby')
  puts 'Building services...'
  execute_docker_compose :build
end

if options[:restart]
  execute_docker_compose :kill
  startup_supporting_services(options)
end

if options[:awestruct][:gen]
  execute_docker_compose :run, ['--no-deps', '--rm', '--service-ports', 'awestruct', 'rake clean gen[docker]']
end

if options[:awestruct][:preview]
  if options[:drupal]
    execute_docker_compose :run, ['--no-deps', '--rm', '--service-ports', 'awestruct', 'rake git_setup clean preview[drupal]']
  else
    execute_docker_compose :run, ['--no-deps', '--rm', '--service-ports', 'awestruct', 'rake git_setup clean preview[docker]']
  end
end

if options[:stage_pr]
  execute_docker_compose :kill
  puts 'Running the docker staging build for PR number' + options[:stage_pr].to_s

  startup_supporting_services(options)

  block_wait_searchisko_configure_finished()

  puts 'Searchisko configure started'
  execute_docker_compose :run, ['--no-deps', '--rm', '--service-ports', 'awestruct', "bundle exec rake create_pr_dirs[docker-pr,build,#{options[:stage_pr]}] clean deploy[staging_docker_pr]"]
end
